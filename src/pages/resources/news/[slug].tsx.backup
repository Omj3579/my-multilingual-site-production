import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { 
  ChevronLeft, 
  Calendar,
  Clock,
  Tag,
  User,
  Newspaper,
  ArrowRight,
  Share2,
  ExternalLink,
  MapPin
} from 'lucide-react';

// Components
import ResourcesLayout from '@/components/layouts/ResourcesLayout';
import { Button } from '@/components/ui/button';

// Hooks
import { useLanguage } from '@/contexts/LanguageContext';

// Enhanced interface for API response
interface NewsArticle {
  id: string;
  slug: string;
  category: 'news';
  newsCategory?: string;
  title: { en: string; hu: string; de: string };
  description: { en: string; hu: string; de: string };
  summary?: { en: string; hu: string; de: string };
  content: { en: string; hu: string; de: string };
  image: string;
  thumbnailImage?: string;
  date: string;
  publishedAt?: string;
  updatedAt?: string;
  author: {
    id: string;
    name: string;
    role: { en: string; hu: string; de: string };
    avatar?: string;
  };
  readTime: number;
  tags: string[];
  featured: boolean;
  customUrl?: string;
  source?: string;
  location?: string;
  urgent?: boolean;
  externalUrl?: string;
}

const NewsArticlePage = () => {
  const router = useRouter();
  const { slug } = router.query;
  const { language, translations } = useLanguage();
  
  const [newsArticle, setNewsArticle] = useState<NewsArticle | null>(null);
  const [relatedNews, setRelatedNews] = useState<NewsArticle[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Helper function for translations
  const t = (key: string) => {
    return translations[key]?.[language] || key;
  };

  // Fetch news article and related articles
  useEffect(() => {
    if (!slug || typeof slug !== 'string') return;

    async function fetchNewsArticle() {
      try {
        setIsLoading(true);
        setError(null);

        // Fetch the specific news article
        const res = await fetch(`/api/combined-news?slug=${encodeURIComponent(slug)}`);
        
        if (!res.ok) {
          if (res.status === 404) {
            setError('Article not found');
            return;
          }
          throw new Error('Failed to fetch news article');
        }

        const data = await res.json();
        
        // Handle both single article response and array response
        const article = Array.isArray(data) ? data[0] : data;
        
        if (!article) {
          setError('Article not found');
          return;
        }

        setNewsArticle(article);

        // Fetch related news articles
        if (article.tags && article.tags.length > 0) {
          const relatedRes = await fetch(`/api/combined-news?tag=${article.tags[0]}&limit=3&exclude=${article.id}`);
          if (relatedRes.ok) {
            const relatedData = await relatedRes.json();
            const relatedArticles = Array.isArray(relatedData) ? relatedData : relatedData.news || [];
            setRelatedNews(relatedArticles.filter((related: NewsArticle) => related.id !== article.id).slice(0, 3));
          }
        }

      } catch (error) {
        console.error('Error loading news article:', error);
        setError('Failed to load news article');
      } finally {
        setIsLoading(false);
      }
    }

    fetchNewsArticle();
  }, [slug]);

  // Loading state
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-16">
        <div className="animate-pulse max-w-3xl mx-auto">
          {/* Breadcrumb skeleton */}
          <div className="h-4 bg-gray-200 rounded w-32 mb-8"></div>
          {/* Header skeleton */}
          <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2 mb-8"></div>
          {/* Image skeleton */}
          <div className="h-64 bg-gray-200 rounded-lg mb-8"></div>
          {/* Content skeleton */}
          <div className="space-y-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-4 bg-gray-200 rounded w-full"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Error or article not found
  if (error || !newsArticle) {
    return (
      <>
        <Head>
          <title>Article Not Found | Flair Plastic</title>
        </Head>
        
        <div className="container mx-auto px-4 py-16 text-center">
          <div className="max-w-md mx-auto">
            <h2 className="text-2xl font-bold mb-4">
              {error === 'Article not found' ? t('news.notFound') : t('news.error')}
            </h2>
            <p className="text-gray-600 mb-6">
              {error === 'Article not found' 
                ? t('news.notFoundDescription') 
                : t('news.errorDescription')
              }
            </p>
            <Button onClick={() => router.push('/resources/news')}>
              {t('news.backToAllNews')}
            </Button>
          </div>
        </div>
      </>
    );
  }

  // Share functionality
  const shareUrl = typeof window !== 'undefined' ? window.location.href : '';
  const shareData = {
    title: newsArticle.title[language],
    text: newsArticle.description[language],
    url: shareUrl,
  };

  const handleShare = async () => {
    if (navigator.share && navigator.canShare(shareData)) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback to copying to clipboard
      await navigator.clipboard.writeText(shareUrl);
      // You could show a toast notification here
    }
  };

  return (
    <>
      <Head>
        <title>{newsArticle.title[language]} | Flair Plastic News</title>
        <meta name="description" content={newsArticle.description[language]} />
        <meta name="keywords" content={newsArticle.tags.join(', ')} />
        <meta property="og:title" content={newsArticle.title[language]} />
        <meta property="og:description" content={newsArticle.description[language]} />
        <meta property="og:image" content={newsArticle.image} />
        <meta property="og:type" content="article" />
        <meta property="article:published_time" content={newsArticle.publishedAt || newsArticle.date} />
        <meta property="article:author" content={newsArticle.author.name} />
        <meta property="article:tag" content={newsArticle.tags.join(', ')} />
        {newsArticle.updatedAt && (
          <meta property="article:modified_time" content={newsArticle.updatedAt} />
        )}
      </Head>

      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4 border-b">
        <div className="container mx-auto px-4">
          <nav className="flex items-center space-x-2 text-sm">
            <Link href="/resources" className="text-gray-600 hover:text-[#16a34a]">
              {t('resources.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <Link href="/resources/news" className="text-gray-600 hover:text-[#16a34a]">
              {t('news.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <span className="text-gray-900 font-medium line-clamp-1">
              {newsArticle.title[language]}
            </span>
          </nav>
        </div>
      </div>

      {/* News Article Content */}
      <article className="py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <header className="mb-8">
              {/* Back button */}
              <Link 
                href="/resources/news" 
                className="inline-flex items-center text-sm text-gray-600 hover:text-[#16a34a] mb-6 transition-colors"
              >
                <ChevronLeft className="h-4 w-4 mr-1" />
                {t('news.backToAllNews')}
              </Link>

              {/* News category and urgency */}
              <div className="flex items-center gap-2 mb-4">
                <span className="inline-flex items-center px-3 py-1 bg-[#f0fdf4] text-[#16a34a] text-sm font-medium rounded-full">
                  <Newspaper className="h-3 w-3 mr-1" />
                  {newsArticle.newsCategory ? 
                    newsArticle.newsCategory.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase()) :
                    t('resources.types.news')
                  }
                </span>
                
                {newsArticle.featured && (
                  <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                    {t('news.featured')}
                  </span>
                )}
                
                {newsArticle.urgent && (
                  <span className="px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">
                    {t('news.urgent')}
                  </span>
                )}
              </div>
              
              {/* Title */}
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900 leading-tight">
                {newsArticle.title[language]}
              </h1>
              
              {/* Summary */}
              {newsArticle.summary && (
                <p className="text-xl text-gray-600 mb-6 leading-relaxed">
                  {newsArticle.summary[language]}
                </p>
              )}
              
              {/* Meta information */}
              <div className="flex flex-wrap gap-6 text-sm text-gray-600 mb-6">
                {/* Date */}
                <div className="flex items-center">
                  <Calendar className="h-4 w-4 mr-2" />
                  <div>
                    <span className="block">
                      {new Date(newsArticle.publishedAt || newsArticle.date).toLocaleDateString(
                        language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE',
                        { year: 'numeric', month: 'long', day: 'numeric' }
                      )}
                    </span>
                    {newsArticle.updatedAt && newsArticle.updatedAt !== newsArticle.date && (
                      <span className="text-xs text-gray-500">
                        Updated: {new Date(newsArticle.updatedAt).toLocaleDateString(
                          language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                        )}
                      </span>
                    )}
                  </div>
                </div>
                
                {/* Reading time */}
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  <span>
                    {t('news.readTime')?.replace('${minutes}', newsArticle.readTime.toString()) || `${newsArticle.readTime} min read`}
                  </span>
                </div>
                
                {/* Author */}
                <div className="flex items-center">
                  <User className="h-4 w-4 mr-2" />
                  <span>{newsArticle.author.name}</span>
                </div>

                {/* Location */}
                {newsArticle.location && (
                  <div className="flex items-center">
                    <MapPin className="h-4 w-4 mr-2" />
                    <span>{newsArticle.location}</span>
                  </div>
                )}

                {/* Share button */}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleShare}
                  className="ml-auto"
                >
                  <Share2 className="h-4 w-4 mr-2" />
                  {t('news.share')}
                </Button>
              </div>
            </header>

            {/* Featured Image */}
            {newsArticle.image && (
              <div className="mb-8 rounded-xl overflow-hidden shadow-lg">
                <div className="relative h-[400px] md:h-[500px] w-full">
                  <Image
                    src={newsArticle.image}
                    alt={newsArticle.title[language]}
                    fill
                    className="object-cover"
                    priority
                  />
                </div>
              </div>
            )}

            {/* Source and External Link */}
            {(newsArticle.source || newsArticle.externalUrl) && (
              <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center justify-between">
                  {newsArticle.source && (
                    <div className="text-sm text-gray-600">
                      <span className="font-medium">{t('news.source')}:</span> {newsArticle.source}
                    </div>
                  )}
                  {newsArticle.externalUrl && (
                    <Link
                      href={newsArticle.externalUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center text-sm text-[#16a34a] hover:text-[#15803d] font-medium"
                    >
                      {t('news.readFullArticle')}
                      <ExternalLink className="h-3 w-3 ml-1" />
                    </Link>
                  )}
                </div>
              </div>
            )}

            {/* Content */}
            <div className="max-w-3xl mx-auto">
              <div 
                className="prose prose-lg max-w-none prose-headings:text-gray-900 prose-a:text-[#16a34a] prose-a:no-underline hover:prose-a:underline prose-strong:text-gray-900 prose-blockquote:border-[#16a34a] prose-blockquote:bg-gray-50 prose-blockquote:rounded-r-lg prose-img:rounded-lg prose-img:shadow-md"
                dangerouslySetInnerHTML={{ __html: newsArticle.content[language] }}
              />
            </div>

            {/* Tags */}
            {newsArticle.tags && newsArticle.tags.length > 0 && (
              <div className="mt-12 pt-8 border-t max-w-3xl mx-auto">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <Tag className="h-4 w-4 mr-2" />
                  {t('news.tags')}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {newsArticle.tags.map((tag) => (
                    <Link
                      key={tag}
                      href={`/resources/news/tags/${tag}`}
                      className="px-3 py-2 bg-gray-100 hover:bg-[#16a34a] hover:text-white text-gray-700 text-sm rounded-full transition-colors"
                    >
                      #{tag.replace('-', ' ')}
                    </Link>
                  ))}
                </div>
              </div>
            )}

            {/* Author Info */}
            <div className="mt-12 pt-8 border-t max-w-3xl mx-auto">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">{t('news.aboutAuthor')}</h3>
              <div className="flex items-start">
                {newsArticle.author.avatar && (
                  <div className="relative w-16 h-16 rounded-full overflow-hidden mr-4 flex-shrink-0">
                    <Image
                      src={newsArticle.author.avatar}
                      alt={newsArticle.author.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                )}
                <div>
                  <h4 className="font-semibold text-gray-900 text-lg">{newsArticle.author.name}</h4>
                  <p className="text-gray-600 mb-2">{newsArticle.author.role[language]}</p>
                  <p className="text-sm text-gray-600">
                    {t('news.authorBio')?.replace('${name}', newsArticle.author.name) || 
                     `${newsArticle.author.name} is a key contributor to Flair Plastic's news and communications.`}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>

      {/* Related News */}
      {relatedNews.length > 0 && (
        <section className="py-16 bg-gray-50">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <h2 className="text-2xl font-bold mb-8 text-center">{t('news.relatedNews')}</h2>
              
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedNews.map((relatedArticle) => (
                  <article key={relatedArticle.id} className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-300 group">
                    {relatedArticle.thumbnailImage && (
                      <div className="relative h-48 overflow-hidden">
                        <Image
                          src={relatedArticle.thumbnailImage}
                          alt={relatedArticle.title[language]}
                          fill
                          className="object-cover group-hover:scale-105 transition-transform duration-300"
                        />
                        {relatedArticle.featured && (
                          <div className="absolute top-3 left-3">
                            <span className="px-2 py-1 bg-[#16a34a] text-white text-xs font-medium rounded-full">
                              {t('news.featured')}
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                    <div className="p-4">
                      <div className="flex items-center mb-2">
                        <span className="inline-flex items-center text-xs font-medium text-[#16a34a] bg-[#f0fdf4] px-2 py-1 rounded-full">
                          <Newspaper className="h-2 w-2 mr-1" />
                          {t('resources.types.news')}
                        </span>
                      </div>
                      <h3 className="font-semibold mb-3 group-hover:text-[#16a34a] transition-colors">
                        <Link href={relatedArticle.customUrl || `/resources/news/${relatedArticle.slug}`}>
                          {relatedArticle.title[language]}
                        </Link>
                      </h3>
                      <p className="text-sm text-gray-600 line-clamp-2 mb-3">
                        {relatedArticle.description[language]}
                      </p>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center text-xs text-gray-500">
                          <Calendar className="h-3 w-3 mr-1" />
                          <span>
                            {new Date(relatedArticle.date).toLocaleDateString(
                              language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                            )}
                          </span>
                        </div>
                        <Link 
                          href={relatedArticle.customUrl || `/resources/news/${relatedArticle.slug}`}
                          className="text-[#16a34a] hover:text-[#15803d] transition-colors flex items-center text-xs font-medium"
                        >
                          {t('news.readMore')}
                          <ArrowRight className="h-3 w-3 ml-1" />
                        </Link>
                      </div>
                    </div>
                  </article>
                ))}
              </div>
              
              <div className="text-center mt-8">
                <Button asChild variant="outline">
                  <Link href="/resources/news">
                    {t('news.viewAllNews')}
                  </Link>
                </Button>
              </div>
            </div>
          </div>
        </section>
      )}
    </>
  );
};

// Use the ResourcesLayout for this page
NewsArticlePage.getLayout = function getLayout(page: React.ReactElement) {
  return <ResourcesLayout>{page}</ResourcesLayout>;
};

export default NewsArticlePage;