import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { 
  ChevronLeft, 
  Calendar,
  Clock,
  User,
  Settings,
  AlertTriangle,
  CheckCircle,
  Info,
  Package,
  Zap,
  Share2,
  ExternalLink,
  Download,
  ArrowRight,
  Tag
} from 'lucide-react';

// Components
import ResourcesLayout from '@/components/layouts/ResourcesLayout';
import { Button } from '@/components/ui/button';

// Hooks
import { useLanguage } from '@/contexts/LanguageContext';

// Enhanced interface for API response
interface UpdateItem {
  id: string;
  slug: string;
  category: 'update';
  updateCategory?: string;
  title: { en: string; hu: string; de: string };
  description: { en: string; hu: string; de: string };
  summary?: { en: string; hu: string; de: string };
  content: { en: string; hu: string; de: string };
  image: string;
  thumbnailImage?: string;
  date: string;
  publishedAt?: string;
  updatedAt?: string;
  author: {
    id: string;
    name: string;
    role: { en: string; hu: string; de: string };
    avatar?: string;
  };
  readTime: number;
  tags: string[];
  featured: boolean;
  customUrl?: string;
  version?: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  affectedProducts?: string[];
  changeType?: 'new-feature' | 'improvement' | 'bug-fix' | 'security' | 'breaking-change';
  downloadUrl?: string;
  releaseNotes?: string;
  urgent?: boolean;
}

const UpdatePage = () => {
  const router = useRouter();
  const { slug } = router.query;
  const { language, translations } = useLanguage();
  
  const [updateItem, setUpdateItem] = useState<UpdateItem | null>(null);
  const [relatedUpdates, setRelatedUpdates] = useState<UpdateItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Helper function for translations
  const t = (key: string) => {
    return translations[key]?.[language] || key;
  };

  // Fetch update item and related updates
  useEffect(() => {
    if (!slug || typeof slug !== 'string') return;

    async function fetchUpdate() {
      try {
        setIsLoading(true);
        setError(null);

        // Fetch the specific update
        const res = await fetch(`/api/combined-updates?slug=${encodeURIComponent(slug)}`);
        
        if (!res.ok) {
          if (res.status === 404) {
            setError('Update not found');
            return;
          }
          throw new Error('Failed to fetch update');
        }

        const data = await res.json();
        
        // Handle both single update response and array response
        const update = Array.isArray(data) ? data[0] : data;
        
        if (!update) {
          setError('Update not found');
          return;
        }

        setUpdateItem(update);

        // Fetch related updates
        if (update.tags && update.tags.length > 0) {
          const relatedRes = await fetch(`/api/combined-updates?tag=${update.tags[0]}&limit=3&exclude=${update.id}`);
          if (relatedRes.ok) {
            const relatedData = await relatedRes.json();
            const relatedUpdates = Array.isArray(relatedData) ? relatedData : relatedData.updates || [];
            setRelatedUpdates(relatedUpdates.filter((related: UpdateItem) => related.id !== update.id).slice(0, 3));
          }
        }

      } catch (error) {
        console.error('Error loading update:', error);
        setError('Failed to load update');
      } finally {
        setIsLoading(false);
      }
    }

    fetchUpdate();
  }, [slug]);

  // Loading state
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-16">
        <div className="animate-pulse max-w-3xl mx-auto">
          {/* Breadcrumb skeleton */}
          <div className="h-4 bg-gray-200 rounded w-32 mb-8"></div>
          {/* Header skeleton */}
          <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2 mb-8"></div>
          {/* Image skeleton */}
          <div className="h-64 bg-gray-200 rounded-lg mb-8"></div>
          {/* Content skeleton */}
          <div className="space-y-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-4 bg-gray-200 rounded w-full"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Error or update not found
  if (error || !updateItem) {
    return (
      <>
        <Head>
          <title>Update Not Found | Flair Plastic</title>
        </Head>
        
        <div className="container mx-auto px-4 py-16 text-center">
          <div className="max-w-md mx-auto">
            <h2 className="text-2xl font-bold mb-4">
              {error === 'Update not found' ? t('updates.notFound') : t('updates.error')}
            </h2>
            <p className="text-gray-600 mb-6">
              {error === 'Update not found' 
                ? t('updates.notFoundDescription') 
                : t('updates.errorDescription')
              }
            </p>
            <Button onClick={() => router.push('/resources/updates')}>
              {t('updates.backToAllUpdates')}
            </Button>
          </div>
        </div>
      </>
    );
  }

  // Get priority icon and color
  const getPriorityDisplay = (priority?: string) => {
    switch (priority) {
      case 'critical':
        return { icon: AlertTriangle, color: 'text-red-600 bg-red-50 border-red-200', bgClass: 'bg-red-50', textColor: 'text-red-600' };
      case 'high':
        return { icon: AlertTriangle, color: 'text-orange-600 bg-orange-50 border-orange-200', bgClass: 'bg-orange-50', textColor: 'text-orange-600' };
      case 'medium':
        return { icon: Info, color: 'text-blue-600 bg-blue-50 border-blue-200', bgClass: 'bg-blue-50', textColor: 'text-blue-600' };
      case 'low':
        return { icon: CheckCircle, color: 'text-green-600 bg-green-50 border-green-200', bgClass: 'bg-green-50', textColor: 'text-green-600' };
      default:
        return { icon: Info, color: 'text-gray-600 bg-gray-50 border-gray-200', bgClass: 'bg-gray-50', textColor: 'text-gray-600' };
    }
  };

  // Get change type icon and color
  const getChangeTypeDisplay = (changeType?: string) => {
    switch (changeType) {
      case 'new-feature':
        return { icon: Zap, color: 'text-green-600 bg-green-50 border-green-200' };
      case 'improvement':
        return { icon: CheckCircle, color: 'text-blue-600 bg-blue-50 border-blue-200' };
      case 'bug-fix':
        return { icon: Settings, color: 'text-orange-600 bg-orange-50 border-orange-200' };
      case 'security':
        return { icon: AlertTriangle, color: 'text-red-600 bg-red-50 border-red-200' };
      case 'breaking-change':
        return { icon: AlertTriangle, color: 'text-red-600 bg-red-50 border-red-200' };
      default:
        return { icon: Info, color: 'text-gray-600 bg-gray-50 border-gray-200' };
    }
  };

  const priorityDisplay = getPriorityDisplay(updateItem.priority);
  const changeTypeDisplay = getChangeTypeDisplay(updateItem.changeType);
  const PriorityIcon = priorityDisplay.icon;
  const ChangeTypeIcon = changeTypeDisplay.icon;

  // Share functionality
  const shareUrl = typeof window !== 'undefined' ? window.location.href : '';
  const shareData = {
    title: updateItem.title[language],
    text: updateItem.description[language],
    url: shareUrl,
  };

  const handleShare = async () => {
    if (navigator.share && navigator.canShare(shareData)) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback to copying to clipboard
      await navigator.clipboard.writeText(shareUrl);
      // You could show a toast notification here
    }
  };

  return (
    <>
      <Head>
        <title>{updateItem.title[language]} | Flair Plastic Updates</title>
        <meta name="description" content={updateItem.description[language]} />
        <meta name="keywords" content={updateItem.tags.join(', ')} />
        <meta property="og:title" content={updateItem.title[language]} />
        <meta property="og:description" content={updateItem.description[language]} />
        <meta property="og:image" content={updateItem.image} />
        <meta property="og:type" content="article" />
        <meta property="article:published_time" content={updateItem.publishedAt || updateItem.date} />
        <meta property="article:author" content={updateItem.author.name} />
        <meta property="article:tag" content={updateItem.tags.join(', ')} />
        {updateItem.updatedAt && (
          <meta property="article:modified_time" content={updateItem.updatedAt} />
        )}
      </Head>

      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4 border-b">
        <div className="container mx-auto px-4">
          <nav className="flex items-center space-x-2 text-sm">
            <Link href="/resources" className="text-gray-600 hover:text-[#3b82f6]">
              {t('resources.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <Link href="/resources/updates" className="text-gray-600 hover:text-[#3b82f6]">
              {t('updates.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <span className="text-gray-900 font-medium line-clamp-1">
              {updateItem.title[language]}
            </span>
          </nav>
        </div>
      </div>

      {/* Update Content */}
      <article className="py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <header className="mb-8">
              {/* Back button */}
              <Link 
                href="/resources/updates" 
                className="inline-flex items-center text-sm text-gray-600 hover:text-[#3b82f6] mb-6 transition-colors"
              >
                <ChevronLeft className="h-4 w-4 mr-1" />
                {t('updates.backToAllUpdates')}
              </Link>

              {/* Update category and badges */}
              <div className="flex flex-wrap items-center gap-2 mb-4">
                <span className="inline-flex items-center px-3 py-1 bg-[#eff6ff] text-[#3b82f6] text-sm font-medium rounded-full">
                  <Settings className="h-3 w-3 mr-1" />
                  {updateItem.updateCategory ? 
                    updateItem.updateCategory.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase()) :
                    t('resources.types.update')
                  }
                </span>
                
                {updateItem.priority && (
                  <span className={`inline-flex items-center px-3 py-1 text-sm font-medium rounded-full border ${priorityDisplay.color}`}>
                    <PriorityIcon className="h-3 w-3 mr-1" />
                    {updateItem.priority} priority
                  </span>
                )}

                {updateItem.changeType && (
                  <span className={`inline-flex items-center px-3 py-1 text-sm font-medium rounded-full border ${changeTypeDisplay.color}`}>
                    <ChangeTypeIcon className="h-3 w-3 mr-1" />
                    {updateItem.changeType.replace('-', ' ')}
                  </span>
                )}

                {updateItem.version && (
                  <span className="inline-flex items-center px-3 py-1 bg-gray-100 text-gray-700 text-sm font-medium rounded-full border border-gray-200">
                    <Package className="h-3 w-3 mr-1" />
                    v{updateItem.version}
                  </span>
                )}

                {updateItem.featured && (
                  <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                    {t('updates.featured')}
                  </span>
                )}
                
                {updateItem.urgent && (
                  <span className="px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">
                    {t('updates.urgent')}
                  </span>
                )}
              </div>
              
              {/* Title */}
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900 leading-tight">
                {updateItem.title[language]}
              </h1>
              
              {/* Summary */}
              {updateItem.summary && (
                <p className="text-xl text-gray-600 mb-6 leading-relaxed">
                  {updateItem.summary[language]}
                </p>
              )}
              
              {/* Meta information */}
              <div className="flex flex-wrap gap-6 text-sm text-gray-600 mb-6">
                {/* Date */}
                <div className="flex items-center">
                  <Calendar className="h-4 w-4 mr-2" />
                  <div>
                    <span className="block">
                      {new Date(updateItem.publishedAt || updateItem.date).toLocaleDateString(
                        language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE',
                        { year: 'numeric', month: 'long', day: 'numeric' }
                      )}
                    </span>
                    {updateItem.updatedAt && updateItem.updatedAt !== updateItem.date && (
                      <span className="text-xs text-gray-500">
                        Updated: {new Date(updateItem.updatedAt).toLocaleDateString(
                          language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                        )}
                      </span>
                    )}
                  </div>
                </div>
                
                {/* Reading time */}
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  <span>
                    {t('updates.readTime')?.replace('${minutes}', updateItem.readTime.toString()) || `${updateItem.readTime} min read`}
                  </span>
                </div>
                
                {/* Author */}
                <div className="flex items-center">
                  <User className="h-4 w-4 mr-2" />
                  <span>{updateItem.author.name}</span>
                </div>

                {/* Download link */}
                {updateItem.downloadUrl && (
                  <Link
                    href={updateItem.downloadUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center text-[#3b82f6] hover:text-[#2563eb] font-medium"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    {t('updates.download')}
                  </Link>
                )}

                {/* Share button */}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleShare}
                  className="ml-auto"
                >
                  <Share2 className="h-4 w-4 mr-2" />
                  {t('updates.share')}
                </Button>
              </div>
            </header>

            {/* Affected Products */}
            {updateItem.affectedProducts && updateItem.affectedProducts.length > 0 && (
              <div className={`mb-6 p-4 rounded-lg border ${priorityDisplay.bgClass} ${priorityDisplay.color.includes('border') ? priorityDisplay.color.split(' ')[2] : 'border-gray-200'}`}>
                <h3 className={`text-sm font-medium mb-2 ${priorityDisplay.textColor}`}>
                  {t('updates.affectedProducts') || 'Affected Products/Systems'}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {updateItem.affectedProducts.map((product) => (
                    <span key={product} className={`px-2 py-1 bg-white text-sm rounded border ${priorityDisplay.textColor} border-current/30`}>
                      {product}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Release Notes */}
            {updateItem.releaseNotes && (
              <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h3 className="text-sm font-medium text-blue-900 mb-2">
                  {t('updates.releaseNotes') || 'Release Notes'}
                </h3>
                <p className="text-blue-800 text-sm">{updateItem.releaseNotes}</p>
              </div>
            )}

            {/* Featured Image */}
            {updateItem.image && (
              <div className="mb-8 rounded-xl overflow-hidden shadow-lg">
                <div className="relative h-[400px] md:h-[500px] w-full">
                  <Image
                    src={updateItem.image}
                    alt={updateItem.title[language]}
                    fill
                    className="object-cover"
                    priority
                  />
                </div>
              </div>
            )}

            {/* Content */}
            <div className="max-w-3xl mx-auto">
              <div 
                className="prose prose-lg max-w-none prose-headings:text-gray-900 prose-a:text-[#3b82f6] prose-a:no-underline hover:prose-a:underline prose-strong:text-gray-900 prose-blockquote:border-[#3b82f6] prose-blockquote:bg-gray-50 prose-blockquote:rounded-r-lg prose-img:rounded-lg prose-img:shadow-md"
                dangerouslySetInnerHTML={{ __html: updateItem.content[language] }}
              />
            </div>

            {/* Tags */}
            {updateItem.tags && updateItem.tags.length > 0 && (
              <div className="mt-12 pt-8 border-t max-w-3xl mx-auto">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <Tag className="h-4 w-4 mr-2" />
                  {t('updates.tags')}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {updateItem.tags.map((tag) => (
                    <Link
                      key={tag}
                      href={`/resources/updates/tags/${tag}`}
                      className="px-3 py-2 bg-gray-100 hover:bg-[#3b82f6] hover:text-white text-gray-700 text-sm rounded-full transition-colors"
                    >
                      #{tag.replace('-', ' ')}
                    </Link>
                  ))}
                </div>
              </div>
            )}

            {/* Author Info */}
            <div className="mt-12 pt-8 border-t max-w-3xl mx-auto">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">{t('updates.aboutAuthor')}</h3>
              <div className="flex items-start">
                {updateItem.author.avatar && (
                  <div className="relative w-16 h-16 rounded-full overflow-hidden mr-4 flex-shrink-0">
                    <Image
                      src={updateItem.author.avatar}
                      alt={updateItem.author.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                )}
                <div>
                  <h4 className="font-semibold text-gray-900 text-lg">{updateItem.author.name}</h4>
                  <p className="text-gray-600 mb-2">{updateItem.author.role[language]}</p>
                  <p className="text-sm text-gray-600">
                    {t('updates.authorBio')?.replace('${name}', updateItem.author.name) || 
                     `${updateItem.author.name} is responsible for product updates and technical communications at Flair Plastic.`}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>

      {/* Related Updates */}
      {relatedUpdates.length > 0 && (
        <section className="py-16 bg-gray-50">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <h2 className="text-2xl font-bold mb-8 text-center">{t('updates.relatedUpdates')}</h2>
              
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedUpdates.map((relatedUpdate) => {
                  const relatedPriorityDisplay = getPriorityDisplay(relatedUpdate.priority);
                  const RelatedPriorityIcon = relatedPriorityDisplay.icon;
                  
                  return (
                    <article key={relatedUpdate.id} className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-300 group">
                      {relatedUpdate.thumbnailImage && (
                        <div className="relative h-48 overflow-hidden">
                          <Image
                            src={relatedUpdate.thumbnailImage}
                            alt={relatedUpdate.title[language]}
                            fill
                            className="object-cover group-hover:scale-105 transition-transform duration-300"
                          />
                          {relatedUpdate.priority && (
                            <div className={`absolute top-3 right-3 flex items-center px-2 py-1 rounded-full text-xs font-medium border ${relatedPriorityDisplay.color}`}>
                              <RelatedPriorityIcon className="h-3 w-3 mr-1" />
                              {relatedUpdate.priority}
                            </div>
                          )}
                          {relatedUpdate.featured && (
                            <div className="absolute top-3 left-3">
                              <span className="px-2 py-1 bg-[#3b82f6] text-white text-xs font-medium rounded-full">
                                {t('updates.featured')}
                              </span>
                            </div>
                          )}
                        </div>
                      )}
                      <div className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="inline-flex items-center text-xs font-medium text-[#3b82f6] bg-[#eff6ff] px-2 py-1 rounded-full">
                            <Settings className="h-2 w-2 mr-1" />
                            {relatedUpdate.updateCategory?.replace('-', ' ') || t('resources.types.update')}
                          </span>
                          {relatedUpdate.version && (
                            <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                              v{relatedUpdate.version}
                            </span>
                          )}
                        </div>
                        <h3 className="font-semibold mb-3 group-hover:text-[#3b82f6] transition-colors">
                          <Link href={relatedUpdate.customUrl || `/resources/updates/${relatedUpdate.slug}`}>
                            {relatedUpdate.title[language]}
                          </Link>
                        </h3>
                        <p className="text-sm text-gray-600 line-clamp-2 mb-3">
                          {relatedUpdate.summary?.[language] || relatedUpdate.description[language]}
                        </p>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center text-xs text-gray-500">
                            <Calendar className="h-3 w-3 mr-1" />
                            <span>
                              {new Date(relatedUpdate.date).toLocaleDateString(
                                language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                              )}
                            </span>
                          </div>
                          <Link 
                            href={relatedUpdate.customUrl || `/resources/updates/${relatedUpdate.slug}`}
                            className="text-[#3b82f6] hover:text-[#2563eb] transition-colors flex items-center text-xs font-medium"
                          >
                            {t('updates.readMore')}
                            <ArrowRight className="h-3 w-3 ml-1" />
                          </Link>
                        </div>
                      </div>
                    </article>
                  );
                })}
              </div>
              
              <div className="text-center mt-8">
                <Button asChild variant="outline">
                  <Link href="/resources/updates">
                    {t('updates.viewAllUpdates')}
                  </Link>
                </Button>
              </div>
            </div>
          </div>
        </section>
      )}
    </>
  );
};

// Use the ResourcesLayout for this page
UpdatePage.getLayout = function getLayout(page: React.ReactElement) {
  return <ResourcesLayout>{page}</ResourcesLayout>;
};

export default UpdatePage;