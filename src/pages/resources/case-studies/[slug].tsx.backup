import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { 
  Calendar,
  Clock,
  Tag,
  User,
  Building2,
  TrendingUp,
  Target,
  CheckCircle,
  Quote,
  ArrowRight,
  Award,
  Users,
  Share2,
  Bookmark
} from 'lucide-react';

// Components
import ResourcesLayout from '@/components/layouts/ResourcesLayout';
import { Button } from '@/components/ui/button';

// Hooks
import { useLanguage } from '@/contexts/LanguageContext';

// Enhanced CaseStudy interface
interface CaseStudy {
  id: string;
  slug: string;
  title: { en: string; hu: string; de: string };
  description: { en: string; hu: string; de: string };
  summary?: { en: string; hu: string; de: string };
  content: { en: string; hu: string; de: string };
  image: string;
  thumbnailImage?: string;
  date: string;
  author: {
    id: string;
    name: string;
    role: { en: string; hu: string; de: string };
    avatar?: string;
  };
  readTime: number;
  tags: string[];
  category: string;
  featured: boolean;
  customUrl?: string;
  client: {
    name: string;
    industry: string;
    size: string;
    location?: string;
  };
  challenge: { en: string; hu: string; de: string };
  solution: { en: string; hu: string; de: string };
  results: {
    metrics: {
      label: { en: string; hu: string; de: string };
      value: string;
      improvement?: string;
    }[];
    testimonial?: {
      quote: { en: string; hu: string; de: string };
      author: string;
      position: string;
    };
  };
  industry: string;
  projectDuration?: string;
  technologies: string[];
}

const CaseStudyPage = () => {
  const router = useRouter();
  const { slug } = router.query;
  const { language, translations } = useLanguage();
  
  const [study, setStudy] = useState<CaseStudy | null>(null);
  const [relatedStudies, setRelatedStudies] = useState<CaseStudy[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Helper function for translations
  const t = (key: string) => {
    return translations[key]?.[language] || key;
  };
  
  useEffect(() => {
    if (!slug) return;
    
    async function fetchCaseStudy() {
      try {
        setIsLoading(true);
        
        // First try to fetch all case studies and find the one with matching slug
        const res = await fetch('/api/combined-case-studies');
        if (!res.ok) throw new Error('Failed to fetch case studies');
        
        const studies: CaseStudy[] = await res.json();
        const foundStudy = studies.find(s => s.slug === slug);
        
        if (foundStudy) {
          setStudy(foundStudy);
          
          // Get related studies based on industry and tags
          const related = studies
            .filter(s => 
              s.id !== foundStudy.id && 
              (s.industry === foundStudy.industry || 
               s.tags.some(tag => foundStudy.tags.includes(tag)))
            )
            .slice(0, 3);
          
          setRelatedStudies(related);
        } else {          // If not found in regular studies, check if it's a custom study with customUrl
          const customStudy = studies.find(s => s.customUrl && s.customUrl.includes(slug as string));
          if (customStudy && customStudy.customUrl) {
            // Redirect to custom URL
            router.replace(customStudy.customUrl);
            return;
          }
          
          // Study not found
          setError('Case study not found');
          setTimeout(() => router.push('/resources/case-studies'), 3000);
        }
        
      } catch (error) {
        console.error('Error loading case study:', error);
        setError('Failed to load case study');
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchCaseStudy();
  }, [slug, router]);
    // Handle custom URL studies
  useEffect(() => {
    if (study?.customUrl && study.customUrl !== router.asPath) {
      router.replace(study.customUrl);
    }
  }, [study, router]);
  
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-16">
        <div className="animate-pulse flex flex-col max-w-4xl mx-auto">
          <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2 mb-12"></div>
          <div className="h-64 bg-gray-200 rounded mb-4"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
        </div>
      </div>
    );
  }
  
  if (error || !study) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <div className="max-w-md mx-auto">
          <h2 className="text-2xl font-bold mb-4">{t('caseStudies.studyNotFound')}</h2>
          <p className="text-gray-600 mb-6">{error || t('caseStudies.studyNotFoundDescription')}</p>
          <Button onClick={() => router.push('/resources/case-studies')}>
            {t('caseStudies.backToAllStudies')}
          </Button>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>{study.title[language]} | Flair Plastic</title>
        <meta name="description" content={study.description[language]} />
        <meta name="keywords" content={study.tags.join(', ')} />
        
        {/* Open Graph */}
        <meta property="og:title" content={study.title[language]} />
        <meta property="og:description" content={study.description[language]} />
        <meta property="og:image" content={study.image} />
        <meta property="og:type" content="article" />
        
        {/* Twitter Card */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={study.title[language]} />
        <meta name="twitter:description" content={study.description[language]} />
        <meta name="twitter:image" content={study.image} />
      </Head>

      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4 border-b">
        <div className="container mx-auto px-4">
          <nav className="flex items-center space-x-2 text-sm">
            <Link href="/resources" className="text-gray-600 hover:text-[#3b82f6]">
              {t('resources.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <Link href="/resources/case-studies" className="text-gray-600 hover:text-[#3b82f6]">
              {t('caseStudies.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <span className="text-gray-900 font-medium">{study.title[language]}</span>
          </nav>
        </div>
      </div>

      {/* Case Study Header */}
      <section className="py-12 bg-gradient-to-r from-[#ebf5ff] to-[#dbeafe]">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Category and Industry */}
            <div className="flex flex-wrap items-center gap-3 mb-6">
              <span className="px-3 py-1 bg-white/80 text-[#3b82f6] text-sm font-medium rounded-full flex items-center">
                <Award className="h-3 w-3 mr-1" />
                {t('resources.types.case-study')}
              </span>
              <span className="px-3 py-1 bg-white/60 text-gray-700 text-sm rounded-full">
                {study.industry}
              </span>
              {study.featured && (
                <span className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm font-medium rounded-full">
                  {t('caseStudies.featured')}
                </span>
              )}
            </div>
            
            {/* Title */}
            <h1 className="text-4xl md:text-5xl font-bold mb-6 text-gray-900">
              {study.title[language]}
            </h1>
            
            {/* Description */}
            <p className="text-xl text-gray-700 mb-6 leading-relaxed">
              {study.description[language]}
            </p>
            
            {/* Client Info */}
            <div className="flex items-center mb-6 p-4 bg-white/70 rounded-lg backdrop-blur-sm">
              <Building2 className="h-5 w-5 text-[#3b82f6] mr-3" />
              <div>
                <div className="font-semibold text-gray-900">{study.client.name}</div>
                <div className="text-sm text-gray-600">
                  {study.client.industry} • {study.client.size}
                  {study.client.location && ` • ${study.client.location}`}
                </div>
              </div>
            </div>
            
            {/* Meta information */}
            <div className="flex flex-wrap gap-6 text-sm text-gray-700 mb-6">
              <div className="flex items-center">
                <Calendar className="h-4 w-4 mr-2" />
                <span>
                  {new Date(study.date).toLocaleDateString(
                    language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                  )}
                </span>
              </div>
              
              {study.projectDuration && (
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  <span>{study.projectDuration}</span>
                </div>
              )}
              
              <div className="flex items-center">
                <User className="h-4 w-4 mr-2" />
                <span>{study.author.name}</span>
                <span className="text-gray-400 mx-2">·</span>
                <span>{study.author.role[language]}</span>
              </div>
            </div>

            {/* Social Actions */}
            <div className="flex items-center gap-3">
              <Button variant="outline" size="sm">
                <Share2 className="h-4 w-4 mr-2" />
                {t('caseStudies.share')}
              </Button>
              <Button variant="outline" size="sm">
                <Bookmark className="h-4 w-4 mr-2" />
                {t('caseStudies.bookmark')}
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Featured Image */}
      {study.image && (
        <section className="py-8">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <div className="relative h-[400px] md:h-[500px] w-full rounded-xl overflow-hidden shadow-lg">
                <Image
                  src={study.image}
                  alt={study.title[language]}
                  fill
                  className="object-cover"
                  priority
                />
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Main Content */}
      <article className="py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Key Results Summary */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-8 mb-12">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <TrendingUp className="h-6 w-6 mr-2 text-[#3b82f6]" />
                {t('caseStudies.keyResults')}
              </h2>              <div className="grid md:grid-cols-3 gap-6">
                {study.results?.metrics?.map((metric, index) => (
                  <div key={index} className="text-center p-4 bg-white rounded-lg shadow-sm">
                    <div className="text-3xl font-bold text-[#3b82f6] mb-2">
                      {metric.value}
                    </div>
                    <div className="text-sm font-medium text-gray-900 mb-1">
                      {metric.label[language]}
                    </div>
                    {metric.improvement && (
                      <div className="text-xs text-green-600 font-medium">
                        {metric.improvement}
                      </div>
                    )}
                  </div>
                )) || []}
              </div>
            </div>

            {/* Challenge, Solution, Technologies Structure */}
            <div className="grid lg:grid-cols-3 gap-8 mb-12">
              {/* Challenge */}
              <div className="bg-red-50 rounded-xl p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center text-red-700">
                  <Target className="h-5 w-5 mr-2" />
                  {t('caseStudies.challenge')}
                </h3>
                <p className="text-gray-700 leading-relaxed">
                  {study.challenge[language]}
                </p>
              </div>

              {/* Solution */}
              <div className="bg-blue-50 rounded-xl p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center text-blue-700">
                  <CheckCircle className="h-5 w-5 mr-2" />
                  {t('caseStudies.solution')}
                </h3>
                <p className="text-gray-700 leading-relaxed">
                  {study.solution[language]}
                </p>
              </div>

              {/* Technologies */}
              <div className="bg-green-50 rounded-xl p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center text-green-700">
                  <CheckCircle className="h-5 w-5 mr-2" />
                  {t('caseStudies.technologies')}
                </h3>                <div className="space-y-2">
                  {(study.technologies || []).map((tech, index) => (
                    <div key={index} className="flex items-center text-sm">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                      {tech}
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Detailed Content */}
            <div 
              className="prose prose-lg prose-gray max-w-none mb-12
                prose-headings:text-gray-900 prose-headings:font-bold
                prose-p:text-gray-700 prose-p:leading-relaxed
                prose-a:text-[#3b82f6] prose-a:no-underline hover:prose-a:underline
                prose-strong:text-gray-900
                prose-ul:text-gray-700 prose-ol:text-gray-700
                prose-blockquote:border-l-[#3b82f6] prose-blockquote:text-gray-600
                prose-code:text-[#3b82f6] prose-code:bg-gray-100 prose-code:px-1 prose-code:rounded
              "
              dangerouslySetInnerHTML={{ __html: study.content[language] }}
            />            {/* Testimonial */}
            {study.results?.testimonial && (
              <div className="bg-gray-50 rounded-xl p-8 mb-12">
                <Quote className="h-8 w-8 text-[#3b82f6] mb-4" />
                <blockquote className="text-xl italic text-gray-700 mb-6">
                  &ldquo;{study.results.testimonial.quote[language]}&rdquo;
                </blockquote>
                <div className="flex items-center">
                  <div>
                    <div className="font-semibold text-gray-900">
                      {study.results.testimonial.author}
                    </div>
                    <div className="text-gray-600">
                      {study.results.testimonial.position}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Author Bio */}
            <div className="mt-12 p-6 bg-gray-50 rounded-lg">
              <div className="flex items-start gap-4">
                {study.author.avatar && (
                  <div className="relative w-16 h-16 rounded-full overflow-hidden flex-shrink-0">
                    <Image
                      src={study.author.avatar}
                      alt={study.author.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                )}
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">{study.author.name}</h3>
                  <p className="text-gray-600 text-sm mb-2">{study.author.role[language]}</p>
                  <p className="text-gray-700 text-sm">
                    {t('caseStudies.authorBio').replace('${name}', study.author.name)}
                  </p>
                </div>
              </div>
            </div>            {/* Tags */}
            {study.tags && study.tags.length > 0 && (
              <div className="mt-8 pt-6 border-t">
                <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                  <Tag className="h-4 w-4 mr-2" />
                  {t('caseStudies.tags')}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {(study.tags || []).map((tag) => (
                    <Link
                      key={tag}
                      href={`/resources/case-studies/tags/${tag}`}
                      className="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm rounded-full transition-colors inline-flex items-center"
                    >
                      #{tag}
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </article>      {/* Related Case Studies */}
      {relatedStudies && relatedStudies.length > 0 && (
        <section className="py-12 bg-gray-50">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <h2 className="text-2xl font-bold mb-8 flex items-center">
                <Users className="h-6 w-6 mr-2" />
                {t('caseStudies.relatedStudies')}
              </h2>
              
              <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
                {(relatedStudies || []).map((relatedStudy) => {
                  const relatedUrl = relatedStudy.customUrl || `/resources/case-studies/${relatedStudy.slug}`;
                  const displayImage = relatedStudy.thumbnailImage || relatedStudy.image;
                  
                  return (
                    <div key={relatedStudy.id} className="bg-white rounded-lg border overflow-hidden hover:shadow-md transition-shadow">
                      {displayImage && (
                        <div className="relative h-40">
                          <Image
                            src={displayImage}
                            alt={relatedStudy.title[language]}
                            fill
                            className="object-cover"
                          />
                        </div>
                      )}
                      <div className="p-4">
                        <div className="text-xs text-gray-500 mb-2">
                          {relatedStudy.industry}
                        </div>
                        <h3 className="font-medium mb-2 line-clamp-2">
                          <Link href={relatedUrl} className="hover:text-[#3b82f6] transition-colors">
                            {relatedStudy.title[language]}
                          </Link>
                        </h3>
                        <p className="text-sm text-gray-600 line-clamp-2 mb-3">
                          {relatedStudy.description[language]}
                        </p>
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500">{relatedStudy.client.name}</span>
                          <Link
                            href={relatedUrl}
                            className="text-xs text-[#3b82f6] hover:text-[#2563eb] flex items-center transition-colors"
                          >
                            {t('caseStudies.readMore')}
                            <ArrowRight className="h-3 w-3 ml-1" />
                          </Link>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </section>
      )}
    </>
  );
};

// Use the ResourcesLayout for this page
CaseStudyPage.getLayout = function getLayout(page: React.ReactElement) {
  return <ResourcesLayout>{page}</ResourcesLayout>;
};

export default CaseStudyPage;