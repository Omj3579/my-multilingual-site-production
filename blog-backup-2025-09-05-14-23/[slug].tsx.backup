import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { Calendar, Clock, Tag, User, Share2, Bookmark } from 'lucide-react';

// Components
import ResourcesLayout from '@/components/layouts/ResourcesLayout';
import { Button } from '@/components/ui/button';
import { BlogCard } from '@/components/blog/BlogCard';

// Hooks
import { useLanguage } from '@/contexts/LanguageContext';

// Enhanced BlogPost interface
interface BlogPost {
  id: string;
  slug: string;
  title: { en: string; hu: string; de: string };
  description: { en: string; hu: string; de: string };
  excerpt?: { en: string; hu: string; de: string };
  content: { en: string; hu: string; de: string };
  image: string;
  thumbnailImage?: string;
  date: string;
  author: {
    id: string;
    name: string;
    role: { en: string; hu: string; de: string };
    avatar?: string;
  };
  readTime: number;
  tags: string[];
  category: string;
  featured: boolean;
  customUrl?: string;
}

interface BlogPostPageProps {
  post: BlogPost;
  relatedPosts: BlogPost[];
}

const BlogPostPage = ({ post, relatedPosts }: BlogPostPageProps) => {
  const router = useRouter();
  const { language, translations } = useLanguage();
  
  // Helper function for translations
  const t = (key: string) => {
    return translations[key]?.[language] || key;
  };
  
  // If the page is being generated (fallback), show loading
  if (router.isFallback) {
    return (
      <div className="container mx-auto px-4 py-16">
        <div className="animate-pulse flex flex-col max-w-3xl mx-auto">
          <div className="h-8 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2 mb-12"></div>
          <div className="h-64 bg-gray-200 rounded mb-4"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded mb-2"></div>
        </div>
      </div>
    );
  }
  
  if (!post) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <div className="max-w-md mx-auto">
          <h2 className="text-2xl font-bold mb-4">{t('blog.postNotFound')}</h2>
          <p className="text-gray-600 mb-6">{t('blog.postNotFoundDescription')}</p>
          <Button onClick={() => router.push('/resources/blog')}>
            {t('blog.backToAllPosts')}
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <>
      <Head>
        <title>{post.title[language]} | Flair Plastic</title>
        <meta name="description" content={post.description[language]} />
        <meta name="keywords" content={post.tags.join(', ')} />
        
        {/* Open Graph */}
        <meta property="og:title" content={post.title[language]} />
        <meta property="og:description" content={post.description[language]} />
        <meta property="og:image" content={post.image} />
        <meta property="og:type" content="article" />
        
        {/* Twitter Card */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={post.title[language]} />
        <meta name="twitter:description" content={post.description[language]} />
        <meta name="twitter:image" content={post.image} />
      </Head>
      
      {/* Breadcrumb */}
      <div className="bg-gray-50 py-4 border-b">
        <div className="container mx-auto px-4">
          <nav className="flex items-center space-x-2 text-sm">
            <Link href="/resources" className="text-gray-600 hover:text-[#fa9b6b]">
              {t('resources.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <Link href="/resources/blog" className="text-gray-600 hover:text-[#fa9b6b]">
              {t('blog.title')}
            </Link>
            <span className="text-gray-400">/</span>
            <span className="text-gray-900 font-medium">{post.title[language]}</span>
          </nav>
        </div>
      </div>
      
      {/* Blog Post Content */}
      <article className="py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <header className="mb-8">
              {/* Post category and featured badge */}
              <div className="flex items-center gap-2 mb-4">
                <span className="px-3 py-1 bg-[#fef2ee] text-[#fa9b6b] text-sm font-medium rounded-full">
                  {t(`resources.types.${post.category}`)}
                </span>
                {post.featured && (
                  <span className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm font-medium rounded-full">
                    {t('blog.featured')}
                  </span>
                )}
              </div>
              
              {/* Title */}
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900 leading-tight">
                {post.title[language]}
              </h1>
              
              {/* Excerpt */}
              {post.excerpt && (
                <p className="text-xl text-gray-700 mb-6 leading-relaxed">
                  {post.excerpt[language]}
                </p>
              )}
              
              {/* Meta information */}
              <div className="flex flex-wrap gap-6 text-sm text-gray-600 mb-6">
                <div className="flex items-center">
                  <Calendar className="h-4 w-4 mr-2" />
                  <span>
                    {new Date(post.date).toLocaleDateString(
                      language === 'en' ? 'en-US' : language === 'hu' ? 'hu-HU' : 'de-DE'
                    )}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  <span>
                    {t('blog.readTime').replace('${minutes}', post.readTime.toString())}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <User className="h-4 w-4 mr-2" />
                  <span>{post.author.name}</span>
                  <span className="text-gray-400 mx-2">Â·</span>
                  <span>{post.author.role[language]}</span>
                </div>
              </div>

              {/* Social Actions */}
              <div className="flex items-center gap-3 pt-4 border-t">
                <Button variant="outline" size="sm">
                  <Share2 className="h-4 w-4 mr-2" />
                  {t('blog.share')}
                </Button>
                <Button variant="outline" size="sm">
                  <Bookmark className="h-4 w-4 mr-2" />
                  {t('blog.bookmark')}
                </Button>
              </div>
            </header>
            
            {/* Featured Image */}
            {post.image && (
              <div className="mb-10 rounded-xl overflow-hidden shadow-lg">
                <div className="relative h-[400px] md:h-[500px] w-full">
                  <Image
                    src={post.image}
                    alt={post.title[language]}
                    fill
                    className="object-cover"
                    priority
                  />
                </div>
              </div>
            )}
            
            {/* Content */}
            <div 
              className="prose prose-lg prose-gray max-w-none
                prose-headings:text-gray-900 prose-headings:font-bold
                prose-p:text-gray-700 prose-p:leading-relaxed
                prose-a:text-[#fa9b6b] prose-a:no-underline hover:prose-a:underline
                prose-strong:text-gray-900
                prose-ul:text-gray-700 prose-ol:text-gray-700
                prose-blockquote:border-l-[#fa9b6b] prose-blockquote:text-gray-600
                prose-code:text-[#fa9b6b] prose-code:bg-gray-100 prose-code:px-1 prose-code:rounded
              "
              dangerouslySetInnerHTML={{ __html: post.content[language] }}
            />
            
            {/* Author Bio */}
            <div className="mt-12 p-6 bg-gray-50 rounded-lg">
              <div className="flex items-start gap-4">
                {post.author.avatar && (
                  <div className="relative w-16 h-16 rounded-full overflow-hidden flex-shrink-0">
                    <Image
                      src={post.author.avatar}
                      alt={post.author.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                )}
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">{post.author.name}</h3>
                  <p className="text-gray-600 text-sm mb-2">{post.author.role[language]}</p>
                  <p className="text-gray-700 text-sm">
                    {t('blog.authorBio').replace('${name}', post.author.name)}
                  </p>
                </div>
              </div>
            </div>
            
            {/* Tags */}
            {post.tags && post.tags.length > 0 && (
              <div className="mt-8 pt-6 border-t">
                <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                  <Tag className="h-4 w-4 mr-2" />
                  {t('blog.tags')}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {post.tags.map((tag) => (
                    <Link
                      key={tag}
                      href={`/resources/blog/tags/${tag}`}
                      className="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm rounded-full transition-colors inline-flex items-center"
                    >
                      #{tag}
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </article>
      
      {/* Related Posts */}
      {relatedPosts.length > 0 && (
        <section className="py-12 bg-gray-50">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto">
              <h2 className="text-2xl md:text-3xl font-bold mb-8 text-center">
                {t('blog.relatedPosts')}
              </h2>
              
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedPosts.map((relatedPost) => (
                  <BlogCard key={relatedPost.id} post={relatedPost} />
                ))}
              </div>
            </div>
          </div>
        </section>
      )}
    </>
  );
};

// Use the ResourcesLayout for this page
BlogPostPage.getLayout = function getLayout(page: React.ReactElement) {
  return <ResourcesLayout>{page}</ResourcesLayout>;
};

// Generate static paths for all blog posts
export async function getStaticPaths() {
  try {
    // Import blog data
    const { blogPosts } = await import('@/data/blogPostsData');
      // Import custom blog posts
    let customBlogPosts: BlogPost[] = [];
    try {
      const customData = await import('@/data/customBlogPostsRegistry');
      customBlogPosts = (customData.customBlogPosts || []) as BlogPost[];
    } catch {
      console.log('No custom blog posts found');
    }

    // Combine all blog posts and extract slugs
    const allPosts = [...blogPosts, ...customBlogPosts];
    const paths = allPosts.map((post) => ({
      params: { slug: post.slug }
    }));

    return {
      paths,
      fallback: false
    };  } catch {
    console.error('Error generating static paths for blog posts');
    return {
      paths: [],
      fallback: false
    };
  }
}

// Generate static props for individual blog post
export async function getStaticProps({ params }: { params: { slug: string } }) {
  try {
    // Import blog data
    const { blogPosts } = await import('@/data/blogPostsData');
      // Import custom blog posts
    let customBlogPosts: BlogPost[] = [];
    try {
      const customData = await import('@/data/customBlogPostsRegistry');
      customBlogPosts = (customData.customBlogPosts || []) as BlogPost[];
    } catch {
      console.log('No custom blog posts found');
    }

    // Find the post by slug
    const allPosts = [...blogPosts, ...customBlogPosts];
    const post = allPosts.find((p) => p.slug === params.slug);

    if (!post) {
      return {
        notFound: true
      };
    }

    // Get related posts (same tags, excluding current post)
    const relatedPosts = allPosts
      .filter((p) => p.id !== post.id && p.tags.some((tag: string) => post.tags.includes(tag)))
      .slice(0, 3);

    return {
      props: {
        post,
        relatedPosts
      }
    };  } catch {
    console.error('Error generating static props for blog post');
    return {
      notFound: true
    };
  }
}

export default BlogPostPage;